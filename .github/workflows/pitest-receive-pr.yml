#
# Part one of two stage process to update PRs with pitest data when accepting PRs from untrusted forks.
#
# The jobs will run the mutation analysis, but the token supplied by gtihub does not have write access.
# The results are therefore stored as an artifact which will be used to update the PR in the second stage.
#
# Projects where PRs come from the same repo can use a simpler single stage process.
#
# see https://blog.pitest.org/pitest-pr-setup/
#
name: Receive

# read-only repo token
# no access to secrets
on:
  pull_request:

jobs:
  store-pitest-feedback:
    # Only run on forked repos.
    if: github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest

    steps:
      - name: Checkout project
        uses: actions/checkout@v3
        with:
          # important to set a fetch depth of 2. By default the checkout action make no history available
          fetch-depth: 2

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17
          cache: 'maven'
      - name: run pitest
        # pitest has been bound to a profile called pitest for normal running
        # we add config to analyse only changes made within a PR and treat surviving mutants as check errors
        # failWhenNoMutations is unset in the pom, as otherwise PRs that do not affect java code would fail
        run: >
          mvn -B -e -Ppitest -Dfeatures="+GIT(from[HEAD~1]), +gitci" test
          -Djansi.passthrough=true
          -Dstyle.color=always
      - name: aggregate files
        run: >
          mvn -B -e -f assertj-core/pom.xml -Ppitest pitest-git:aggregate
          -Djansi.passthrough=true
          -Dstyle.color=always
      - name: upload results
        uses: actions/upload-artifact@v3
        with:
          name: pitest
          path: target/assertj-core/pit-reports-ci/
